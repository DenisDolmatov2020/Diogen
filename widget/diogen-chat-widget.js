(function() {
    'use strict';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const DEFAULT_CONFIG = {
        apiUrl: 'https://knowledge.slovo-soft.ru/api/v1/mentorium',
        width: '508px',
        height: '552px',
        buttonSize: '60px',
        position: 'bottom-right',
        project: 'pfki',
        projectId: '000', // –î–æ–±–∞–≤–ª—è–µ–º projectId –¥–ª—è reference_id
        userId: '3654823', // –î–æ–±–∞–≤–ª—è–µ–º userId –¥–ª—è reference_id
        basicLogin: 'slsuser',
        basicPassword: '20241001',
        theme: 'auto', // 'light', 'dark', 'auto'
        enableThemeToggle: true,
        // –û–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∫—Å–∏
        devMode: 'auto', // 'auto', 'true', 'false' - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ
        proxyPath: '/api/proxy', // –ü—É—Ç—å –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ö–µ—à –æ—Ç URL)
        // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
        primaryColor: null,
        primaryHoverColor: null,
        textColor: null,
        bgColor: null,
        surfaceBgColor: null,
        userBgColor: null,
        borderColor: null,
        borderRadius: null,
        fontFamily: null,
        inputRadius: null,
        title: '–ß–∞—Ç-–±–æ—Ç',
        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        darkPrimaryColor: null,
        darkTextColor: null,
        darkBgColor: null,
        darkSurfaceBgColor: null,
        darkUserBgColor: null,
        darkBorderColor: null,
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        bottomOffset: null,
        rightOffset: null,
        leftOffset: null,
        topOffset: null
    };
    
    class DiogenChatWidget {
        constructor(config = {}) {
            this.config = { ...DEFAULT_CONFIG, ...config };
            this.isOpen = false;
            this.isFullscreen = false;
            this.messages = [];
            this.isLoading = false;
            this.referenceId = this.generateReferenceId();
            this.currentTheme = this.getInitialTheme();
            this.init();
        }
        
        init() {
            this.createWidgetButton();
            this.createModal();
            this.attachEventListeners();
            this.applyCustomStyles();
        }
        
        generateReferenceId() {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º reference_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ PROJECT_ID.USER_ID.TIMESTAMP
            const projectId = this.config.projectId || '000';
            const userId = this.config.userId || '3654823';
            const timestamp = Math.floor(Date.now() / 1000); // Unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            const referenceId = `${projectId}.${userId}.${timestamp}`;
            console.log('üÜî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º reference_id:', referenceId);
            
            return referenceId;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏
        shouldUseProxy() {
            // –ï—Å–ª–∏ devMode —è–≤–Ω–æ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (this.config.devMode === 'true' || this.config.devMode === true) {
                return true;
            }
            if (this.config.devMode === 'false' || this.config.devMode === false) {
                return false;
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (devMode === 'auto')
            const isLocalhost = window.location.hostname === 'localhost' || 
                               window.location.hostname === '127.0.0.1' ||
                               window.location.hostname.includes('localhost');
            
            const isDevPort = window.location.port === '5173' || 
                             window.location.port === '3000' ||
                             window.location.port === '8080';
            
            const isDifferentOrigin = !this.config.apiUrl.includes(window.location.origin);
            
            return isLocalhost && isDevPort && isDifferentOrigin;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
        generateProxyUrl() {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –ø—É—Ç—å
            return '/api/widget-proxy';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        getApiUrl() {
            if (this.shouldUseProxy()) {
                const proxyUrl = this.generateProxyUrl();
                console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏:', proxyUrl, '‚Üí', this.config.apiUrl);
                return proxyUrl;
            }
            console.log('üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', this.config.apiUrl);
            return this.config.apiUrl;
        }
        
        getInitialTheme() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
            const savedTheme = localStorage.getItem('diogen-chat-theme');
            if (savedTheme && ['light', 'dark', 'auto'].includes(savedTheme)) {
                return savedTheme;
            }
            return this.config.theme;
        }
        
        setTheme(theme) {
            this.currentTheme = theme;
            localStorage.setItem('diogen-chat-theme', theme);
            this.applyTheme();
            if (this.themeToggleBtn && this.config.enableThemeToggle) {
                this.updateThemeButton();
            }
        }
        
        applyTheme() {
            const body = document.body;
            
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º—ã
            body.classList.remove('diogen-theme-light', 'diogen-theme-dark', 'diogen-theme-auto');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            body.classList.add(`diogen-theme-${this.currentTheme}`);
        }
        
        toggleTheme() {
            const themeOrder = ['auto', 'light', 'dark'];
            const currentIndex = themeOrder.indexOf(this.currentTheme);
            const nextIndex = (currentIndex + 1) % themeOrder.length;
            this.setTheme(themeOrder[nextIndex]);
        }
        
        createWidgetButton() {
            const button = document.createElement('div');
            button.className = 'diogen-chat-button';
            button.innerHTML = `
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2C6.48 2 2 6.48 2 12c0 1.54.36 3.04 1.05 4.39L2 22l5.61-1.05C9.04 21.64 10.46 22 12 22c5.52 0 10-4.48 10-10S17.52 2 12 2zm0 18c-1.4 0-2.76-.35-4-.99l-.28-.17-2.35.44.44-2.35-.17-.28C4.35 14.76 4 13.4 4 12c0-4.41 3.59-8 8-8s8 3.59 8 8-3.59 8-8 8z" fill="currentColor"/>
                    <path d="M8.5 9.5c0-.28.22-.5.5-.5h6c.28 0 .5.22.5.5s-.22.5-.5.5H9c-.28 0-.5-.22-.5-.5zM9 12h4c.28 0 .5.22.5.5s-.22.5-.5.5H9c-.28 0-.5-.22-.5-.5s.22-.5.5-.5zM9 14.5h2c.28 0 .5.22.5.5s-.22.5-.5.5H9c-.28 0-.5-.22-.5-.5s.22-.5.5-.5z" fill="currentColor"/>
                </svg>
            `;
            
            document.body.appendChild(button);
            this.button = button;
            this.applyButtonPosition();
        }
        
        createModal() {
            const modal = document.createElement('div');
            modal.className = 'diogen-chat-modal';
            modal.innerHTML = `
                <div class="diogen-chat-overlay">
                    <div class="diogen-chat-container">
                        <div class="diogen-chat-header">
                            <h3 class="diogen-chat-title">${this.config.title}</h3>
                            <div class="diogen-chat-controls">
                                <button title="–ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω" class="diogen-chat-btn-fullscreen">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M10.9733 4.66667C10.9733 4.48986 10.9031 4.32029 10.7781 4.19526C10.653 4.07024 10.4835 4 10.3067 4H4.66667C4.48986 4 4.32029 4.07024 4.19526 4.19526C4.07024 4.32029 4 4.48986 4 4.66667V10.3067C4 10.4835 4.07024 10.653 4.19526 10.7781C4.32029 10.9031 4.48986 10.9733 4.66667 10.9733C4.84348 10.9733 5.01305 10.9031 5.13807 10.7781C5.2631 10.653 5.33333 10.4835 5.33333 10.3067V6.27733L9.836 10.78C9.8975 10.8437 9.97106 10.8945 10.0524 10.9294C10.1337 10.9643 10.2212 10.9827 10.3097 10.9835C10.3983 10.9843 10.486 10.9674 10.568 10.9339C10.6499 10.9004 10.7243 10.8509 10.7869 10.7883C10.8495 10.7257 10.899 10.6512 10.9325 10.5693C10.9661 10.4874 10.9829 10.3996 10.9822 10.3111C10.9814 10.2225 10.963 10.1351 10.9281 10.0537C10.8931 9.97239 10.8423 9.89883 10.7787 9.83733L6.276 5.33333H10.3067C10.4835 5.33333 10.653 5.2631 10.7781 5.13807C10.9031 5.01305 10.9733 4.84348 10.9733 4.66667ZM16.6667 5.33333C17.1971 5.33333 17.7058 5.54405 18.0809 5.91912C18.456 6.29419 18.6667 6.8029 18.6667 7.33333V12H14.3587C13.7328 12 13.1325 12.2486 12.6899 12.6912C12.2473 13.1338 11.9987 13.7341 11.9987 14.36V18.6667H7.33333C6.8029 18.6667 6.29419 18.456 5.91912 18.0809C5.54405 17.7058 5.33333 17.1971 5.33333 16.6667V13.6933C5.33333 13.5165 5.2631 13.347 5.13807 13.2219C5.01305 13.0969 4.84348 13.0267 4.66667 13.0267C4.48986 13.0267 4.32029 13.0969 4.19526 13.2219C4.07024 13.347 4 13.5165 4 13.6933V16.6667C4 17.5507 4.35119 18.3986 4.97631 19.0237C5.60143 19.6488 6.44928 20 7.33333 20H16.6667C17.5507 20 18.3986 19.6488 19.0237 19.0237C19.6488 18.3986 20 17.5507 20 16.6667V7.33333C20 6.44928 19.6488 5.60143 19.0237 4.97631C18.3986 4.35119 17.5507 4 16.6667 4H13.6933C13.5165 4 13.347 4.07024 13.2219 4.19526C13.0969 4.32029 13.0267 4.48986 13.0267 4.66667C13.0267 4.84348 13.0969 5.01305 13.2219 5.13807C13.347 5.2631 13.5165 5.33333 13.6933 5.33333H16.6667Z" fill="currentColor"/>
                                    </svg>
                                </button>
                                ${this.config.enableThemeToggle ? `
                                <button title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É" class="diogen-chat-btn-theme">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" fill="currentColor"/>
                                    </svg>
                                </button>
                                ` : ''}
                                <button class="diogen-chat-close" title="–ó–∞–∫—Ä—ã—Ç—å">
                                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="diogen-chat-content">
                            <div class="diogen-chat-messages" id="diogen-messages-container">
                                <div class="diogen-messages-container">
                                    <div class="diogen-chat-placeholder">
                                        <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏, —Ç–µ—Ä–º–∏–Ω—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å<br>–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
                                    </div>
                                </div>
                            </div>
                            <div class="diogen-chat-input-container">
                                <div class="diogen-input-container">
                                    <div class="diogen-input-wrapper">
                                        <textarea 
                                            class="diogen-input-field" 
                                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
                                            rows="1"
                                            id="diogen-input-field"
                                        ></textarea>
                                        <button class="diogen-send-button" id="diogen-send-button">
                                            <svg width="22" height="20" viewBox="0 0 22 20" xmlns="http://www.w3.org/2000/svg">
                                                <path fill="currentColor" d="M2.24862 0.249944C1.42319 -0.144342 0.516337 0.609944 0.752051 1.49366L2.48005 7.95051C2.52336 8.11279 2.61338 8.25877 2.73895 8.37032C2.86452 8.48186 3.02009 8.55406 3.18634 8.57794L11.6583 9.78823C11.9035 9.82252 11.9035 10.1774 11.6583 10.2125L3.18719 11.4219C3.02094 11.4458 2.86537 11.518 2.73981 11.6296C2.61424 11.7411 2.52421 11.8871 2.48091 12.0494L0.752051 18.5097C0.516337 19.3925 1.42319 20.1468 2.24862 19.7534L20.6755 10.9685C21.4889 10.5811 21.4889 9.42223 20.6755 9.03394L2.24862 0.249944Z"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            this.modal = modal;
            this.messagesContainer = modal.querySelector('.diogen-messages-container');
            this.inputField = modal.querySelector('#diogen-input-field');
            this.sendButton = modal.querySelector('#diogen-send-button');
            this.container = modal.querySelector('.diogen-chat-container');
            this.fullscreenBtn = modal.querySelector('.diogen-chat-btn-fullscreen');
            this.closeBtn = modal.querySelector('.diogen-chat-close');
            this.themeToggleBtn = modal.querySelector('.diogen-chat-btn-theme');
        }
        
        attachEventListeners() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if (!this.button || !this.modal || !this.inputField || !this.sendButton) {
                console.error('Diogen Chat Widget: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM');
                return;
            }

            // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
            this.button.addEventListener('click', () => this.openChat());
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
            if (this.closeBtn) {
                this.closeBtn.addEventListener('click', () => this.closeChat());
            }
            
            const overlay = this.modal.querySelector('.diogen-chat-overlay');
            if (overlay) {
                overlay.addEventListener('click', (e) => {
                    if (e.target === e.currentTarget) this.closeChat();
                });
            }
            
            // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            if (this.fullscreenBtn) {
                this.fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            this.sendButton.addEventListener('click', () => this.sendMessage());
            this.inputField.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            this.inputField.addEventListener('input', () => {
                this.handleInputResize();
                this.updateSendButton();
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            this.updateSendButton();
            if (this.fullscreenBtn) {
                this.updateFullscreenButton();
            }
            
            // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.isOpen) this.closeChat();
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
            if (this.themeToggleBtn) {
                this.themeToggleBtn.addEventListener('click', () => this.toggleTheme());
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
            this.applyTheme();
            if (this.themeToggleBtn && this.config.enableThemeToggle) {
                this.updateThemeButton();
            }
        }
        
        openChat() {
            if (!this.isOpen) {
                this.modal.classList.add('diogen-chat-open');
                this.button.classList.add('diogen-chat-button-hidden');
                this.isOpen = true;
                
                // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                setTimeout(() => {
                    this.inputField.focus();
                }, 300);
            }
        }
        
        closeChat() {
            this.modal.classList.remove('diogen-chat-open');
            this.button.classList.remove('diogen-chat-button-hidden');
            this.isOpen = false;
            this.isFullscreen = false;
            this.container.classList.remove('diogen-chat-fullscreen');
        }
        
        toggleFullscreen() {
            this.isFullscreen = !this.isFullscreen;
            this.container.classList.toggle('diogen-chat-fullscreen', this.isFullscreen);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.updateFullscreenButton();
        }
        
        updateFullscreenButton() {
            const fullscreenBtn = this.fullscreenBtn;
            if (!fullscreenBtn) return;

            // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (this.isFullscreen) {
                // –ò–∫–æ–Ω–∫–∞ "—Å–≤–µ—Ä–Ω—É—Ç—å"
                fullscreenBtn.innerHTML = `
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M4.00886 10.3169C4.00886 10.4937 4.0791 10.6632 4.20412 10.7883C4.32915 10.9133 4.49871 10.9835 4.67553 10.9835H10.3155C10.4923 10.9835 10.6619 10.9133 10.7869 10.7883C10.912 10.6632 10.9822 10.4937 10.9822 10.3169V4.67686C10.9822 4.50005 10.912 4.33048 10.7869 4.20545C10.6619 4.08043 10.4923 4.01019 10.3155 4.01019C10.1387 4.01019 9.96915 4.08043 9.84412 4.20545C9.7191 4.33048 9.64886 4.50005 9.64886 4.67686V8.70619L5.14619 4.20353C5.08469 4.13985 5.01113 4.08906 4.9298 4.05412C4.84846 4.01919 4.76098 4.00079 4.67246 4.00003C4.58394 3.99926 4.49615 4.01612 4.41422 4.04964C4.33229 4.08316 4.25786 4.13267 4.19526 4.19526C4.13267 4.25786 4.08316 4.33229 4.04964 4.41422C4.01612 4.49615 3.99926 4.58394 4.00003 4.67246C4.00079 4.76098 4.01919 4.84846 4.05412 4.92979C4.08906 5.01113 4.13985 5.08469 4.20353 5.14619L8.70619 9.65019H4.67553C4.49871 9.65019 4.32915 9.72043 4.20412 9.84545C4.0791 9.97048 4.00886 10.14 4.00886 10.3169ZM16.6667 5.33333C17.1971 5.33333 17.7058 5.54405 18.0809 5.91912C18.456 6.29419 18.6667 6.8029 18.6667 7.33333V12H14.3587C13.7328 12 13.1325 12.2486 12.6899 12.6912C12.2473 13.1338 11.9987 13.7341 11.9987 14.36V18.6667H7.33333C6.8029 18.6667 6.29419 18.456 5.91912 18.0809C5.54405 17.7058 5.33333 17.1971 5.33333 16.6667V13.6933C5.33333 13.5165 5.2631 13.347 5.13807 13.2219C5.01305 13.0969 4.84348 13.0267 4.66667 13.0267C4.48986 13.0267 4.32029 13.0969 4.19526 13.2219C4.07024 13.347 4 13.5165 4 13.6933V16.6667C4 17.5507 4.35119 18.3986 4.97631 19.0237C5.60143 19.6488 6.44928 20 7.33333 20H16.6667C17.5507 20 18.3986 19.6488 19.0237 19.0237C19.6488 18.3986 20 17.5507 20 16.6667V7.33333C20 6.44928 19.6488 5.60143 19.0237 4.97631C18.3986 4.35119 17.5507 4 16.6667 4H13.6933C13.5165 4 13.347 4.07024 13.2219 4.19526C13.0969 4.32029 13.0267 4.48986 13.0267 4.66667C13.0267 4.84348 13.0969 5.01305 13.2219 5.13807C13.347 5.2631 13.5165 5.33333 13.6933 5.33333H16.6667Z" fill="currentColor"/>
                    </svg>
                `;
                fullscreenBtn.title = '–°–≤–µ—Ä–Ω—É—Ç—å';
            } else {
                // –ò–∫–æ–Ω–∫–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å" 
                fullscreenBtn.innerHTML = `
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.9733 4.66667C10.9733 4.48986 10.9031 4.32029 10.7781 4.19526C10.653 4.07024 10.4835 4 10.3067 4H4.66667C4.48986 4 4.32029 4.07024 4.19526 4.19526C4.07024 4.32029 4 4.48986 4 4.66667V10.3067C4 10.4835 4.07024 10.653 4.19526 10.7781C4.32029 10.9031 4.48986 10.9733 4.66667 10.9733C4.84348 10.9733 5.01305 10.9031 5.13807 10.7781C5.2631 10.653 5.33333 10.4835 5.33333 10.3067V6.27733L9.836 10.78C9.8975 10.8437 9.97106 10.8945 10.0524 10.9294C10.1337 10.9643 10.2212 10.9827 10.3097 10.9835C10.3983 10.9843 10.486 10.9674 10.568 10.9339C10.6499 10.9004 10.7243 10.8509 10.7869 10.7883C10.8495 10.7257 10.899 10.6512 10.9325 10.5693C10.9661 10.4874 10.9829 10.3996 10.9822 10.3111C10.9814 10.2225 10.963 10.1351 10.9281 10.0537C10.8931 9.97239 10.8423 9.89883 10.7787 9.83733L6.276 5.33333H10.3067C10.4835 5.33333 10.653 5.2631 10.7781 5.13807C10.9031 5.01305 10.9733 4.84348 10.9733 4.66667ZM16.6667 5.33333C17.1971 5.33333 17.7058 5.54405 18.0809 5.91912C18.456 6.29419 18.6667 6.8029 18.6667 7.33333V12H14.3587C13.7328 12 13.1325 12.2486 12.6899 12.6912C12.2473 13.1338 11.9987 13.7341 11.9987 14.36V18.6667H7.33333C6.8029 18.6667 6.29419 18.456 5.91912 18.0809C5.54405 17.7058 5.33333 17.1971 5.33333 16.6667V13.6933C5.33333 13.5165 5.2631 13.347 5.13807 13.2219C5.01305 13.0969 4.84348 13.0267 4.66667 13.0267C4.48986 13.0267 4.32029 13.0969 4.19526 13.2219C4.07024 13.347 4 13.5165 4 13.6933V16.6667C4 17.5507 4.35119 18.3986 4.97631 19.0237C5.60143 19.6488 6.44928 20 7.33333 20H16.6667C17.5507 20 18.3986 19.6488 19.0237 19.0237C19.6488 18.3986 20 17.5507 20 16.6667V7.33333C20 6.44928 19.6488 5.60143 19.0237 4.97631C18.3986 4.35119 17.5507 4 16.6667 4H13.6933C13.5165 4 13.347 4.07024 13.2219 4.19526C13.0969 4.32029 13.0267 4.48986 13.0267 4.66667C13.0267 4.84348 13.0969 5.01305 13.2219 5.13807C13.347 5.2631 13.5165 5.33333 13.6933 5.33333H16.6667Z" fill="currentColor"/>
                    </svg>
                `;
                fullscreenBtn.title = '–ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω';
            }
        }
        
        updateThemeButton() {
            const themeBtn = this.themeToggleBtn;
            if (!themeBtn) return;

            // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            switch (this.currentTheme) {
                case 'light':
                    themeBtn.innerHTML = `
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="5" fill="currentColor"/>
                            <line x1="12" y1="1" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="12" y1="21" x2="12" y2="23" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="1" y1="12" x2="3" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="21" y1="12" x2="23" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                    `;
                    themeBtn.title = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (–Ω–∞–∂–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)';
                    break;
                case 'dark':
                    themeBtn.innerHTML = `
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" fill="currentColor"/>
                        </svg>
                    `;
                    themeBtn.title = '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (–Ω–∞–∂–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)';
                    break;
                case 'auto':
                default:
                    themeBtn.innerHTML = `
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
                            <path d="M12 2a10 10 0 0 1 0 20V2Z" fill="currentColor"/>
                        </svg>
                    `;
                    themeBtn.title = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞ (–Ω–∞–∂–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)';
                    break;
            }
        }
        
        handleInputResize() {
            this.inputField.style.height = 'auto';
            this.inputField.style.height = this.inputField.scrollHeight + 'px';
        }
        
        addMessage(content, isUser, isLoading = false) {
            const messageId = 'msg_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            const message = {
                id: messageId,
                content,
                isUser,
                timestamp: new Date(),
                isLoading
            };
            
            this.messages.push(message);
            this.renderMessage(message);
            this.scrollToBottom();
            
            return message;
        }
        
        renderMessage(message, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'diogen-message diogen-user-message' : 'diogen-message diogen-bot-message';
            
            if (isUser) {
                messageDiv.innerHTML = `
                    <div class="diogen-message-content">
                        <div class="diogen-message-text">${this.formatMessageText(message)}</div>
                    </div>
                `;
            } else {
                messageDiv.innerHTML = `
                    <div class="diogen-message-content">
                        <div class="diogen-message-text">${this.formatMessageText(message)}</div>
                    </div>
                `;
            }
            
            // –£–¥–∞–ª—è–µ–º placeholder –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            const placeholder = this.messagesContainer.querySelector('.diogen-chat-placeholder');
            if (placeholder) {
                placeholder.remove();
            }
            
            this.messagesContainer.appendChild(messageDiv);
            this.scrollToBottom();
        }
        
        formatMessageText(text) {
            if (!text) return '';
            
            let formatted = text;
            
            // –£–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            formatted = formatted.replace(/–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–ø–µ—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\.\s*\\–∏—Å—Ö–æ–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã[\s\S]*?(?=\n\n|\n[–ê-–Ø]|$)/gi, '');
            formatted = formatted.replace(/–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö = \d+\.\d+%/gi, '');
            formatted = formatted.replace(/–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å finetune –º–æ–¥–µ–ª—å/gi, '');
            formatted = formatted.replace(/–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –¥–æ —Ü–µ–Ω–∑–æ—Ä–∞:/gi, '');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            formatted = formatted
                .replace(/\\r\\n/g, '\n')
                .replace(/\\n/g, '\n')
                .replace(/\r\n/g, '\n')
                .replace(/\r/g, '\n');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted = formatted
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code>$1</code>');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
            const markdownLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/gi;
            formatted = formatted.replace(markdownLinkRegex, '<a href="$2" target="_blank" rel="noopener noreferrer" class="diogen-chat-link">$1</a>');
            
            const urlRegex = /(?<!\]\()(https?:\/\/[^\s<>"{}|\\^`\[\]]+)(?!\))/gi;
            formatted = formatted.replace(urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer" class="diogen-chat-link">$1</a>');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è HTML
            formatted = formatted.replace(/\n/g, '<br>');
            
            return formatted.trim();
        }
        
        scrollToBottom() {
            setTimeout(() => {
                this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            }, 100);
        }
        
        sendMessage(messageText = null) {
            const text = messageText || this.inputField.value.trim();
            if (!text) return;

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.renderMessage(text, true);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            if (!messageText) {
                this.inputField.value = '';
                this.updateSendButton();
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            this.callChatAPI(text);
        }
        
        async callChatAPI(message) {
            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                this.showLoadingMessage();
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º payload –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤ curl –ø—Ä–∏–º–µ—Ä–µ
                const payload = [{
                    component_name: "meta_data",
                    parent_block_id: "block-0-1",
                    action_mode: "dialog",
                    action_params: [
                        {
                            variable: "input_text",
                            data: message
                        },
                        {
                            variable: "reference_id",
                            data: this.generateReferenceId()
                        }
                    ]
                }];
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', JSON.stringify(payload, null, 2));
                
                const response = await fetch(this.getApiUrl(), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Basic ' + btoa(this.config.basicLogin + ':' + this.config.basicPassword),
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º API URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
                        'X-Target-URL': this.config.apiUrl
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);
                this.processServerResponse(data);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                this.hideLoadingMessage();
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.';
                
                if (error.message.includes('Failed to fetch') || error.message.includes('CORS')) {
                    if (this.shouldUseProxy()) {
                        const proxyUrl = this.generateProxyUrl();
                        errorMessage = `–û—à–∏–±–∫–∞ CORS. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ vite.config.js:\n\n` +
                                     `'${proxyUrl}': {\n` +
                                     `  target: '${this.config.apiUrl}',\n` +
                                     `  changeOrigin: true,\n` +
                                     `  secure: false\n` +
                                     `}`;
                    } else {
                        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS.';
                    }
                }
                
                this.renderMessage(errorMessage, false);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                if (this.shouldUseProxy()) {
                    console.group('üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–∫—Å–∏:');
                    console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ vite.config.js:');
                    console.log(`'${this.generateProxyUrl()}': {`);
                    console.log(`  target: '${this.config.apiUrl}',`);
                    console.log(`  changeOrigin: true,`);
                    console.log(`  secure: false`);
                    console.log(`}`);
                    console.groupEnd();
                }
            }
        }
        
        showLoadingMessage() {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'diogen-message diogen-bot-message diogen-loading-message';
            loadingDiv.innerHTML = `
                <div class="diogen-message-content">
                    <div class="diogen-loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            `;
            this.messagesContainer.appendChild(loadingDiv);
            this.scrollToBottom();
        }
        
        hideLoadingMessage() {
            const loadingMessage = this.messagesContainer.querySelector('.diogen-loading-message');
            if (loadingMessage) {
                loadingMessage.remove();
            }
        }
        
        processServerResponse(data) {
            this.hideLoadingMessage();
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞
            if (Array.isArray(data) && data.length > 0) {
                const responseItem = data[0];
                
                // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ items
                if (responseItem.items && responseItem.items.length > 0) {
                    for (const item of responseItem.items) {
                        if (item.meta && item.meta.variable === 'output_text' && item.meta.data) {
                            this.renderMessage(item.meta.data, false);
                            return;
                        }
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ output_text, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
                if (responseItem.message) {
                    this.renderMessage(responseItem.message, false);
                } else {
                    this.renderMessage('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.', false);
                }
            } else if (data.message) {
                // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                this.renderMessage(data.message, false);
            } else {
                this.renderMessage('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.', false);
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.actions && data.actions.length > 0) {
                this.renderActionButtons(data.actions);
            }
        }
        
        renderActionButtons(actions) {
            if (!actions || actions.length === 0) return;
            
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'diogen-message diogen-bot-message';
            
            let buttonsHtml = '<div class="diogen-message-content"><div class="diogen-action-buttons">';
            actions.forEach(action => {
                buttonsHtml += `<button class="diogen-action-button" data-action="${action.value}">${action.label}</button>`;
            });
            buttonsHtml += '</div></div>';
            
            actionsDiv.innerHTML = buttonsHtml;
            this.messagesContainer.appendChild(actionsDiv);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            actionsDiv.querySelectorAll('.diogen-action-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const action = e.target.getAttribute('data-action');
                    this.handleActionClick(action);
                });
            });
            
            this.scrollToBottom();
        }
        
        updateSendButton() {
            const hasText = this.inputField.value.trim().length > 0;
            this.sendButton.disabled = !hasText || this.isLoading;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const svgPath = this.sendButton.querySelector('path');
            if (svgPath) {
                if (!hasText || this.isLoading) {
                    svgPath.setAttribute('fill', '#9CA3AF'); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
                } else {
                    svgPath.setAttribute('fill', '#FFFFFF'); // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
                }
            }
        }
        
        handleActionClick(action) {
            this.sendMessage(action);
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–º
        setProject(projectId) {
            this.config.project = projectId;
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º reference_id –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            this.referenceId = this.generateReferenceId();
        }
        
        updateStyles(styles) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª–µ–π
            Object.assign(this.config, styles);
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏
            this.applyCustomStyles();
        }
        
        updateConfig(newConfig) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            Object.assign(this.config, newConfig);
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.applyCustomStyles();
        }
        
        getCurrentTheme() {
            return this.currentTheme;
        }
        
        getConfig() {
            return { ...this.config };
        }
        
        destroy() {
            if (this.button) this.button.remove();
            if (this.modal) this.modal.remove();
        }
        
        applyCustomStyles() {
            const root = document.documentElement;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
            if (this.config.primaryColor) {
                root.style.setProperty('--diogen-primary-color', this.config.primaryColor);
            }
            if (this.config.primaryHoverColor) {
                root.style.setProperty('--diogen-primary-hover', this.config.primaryHoverColor);
            }
            if (this.config.textColor) {
                root.style.setProperty('--diogen-text-color', this.config.textColor);
            }
            if (this.config.bgColor) {
                root.style.setProperty('--diogen-bg-color', this.config.bgColor);
            }
            if (this.config.surfaceBgColor) {
                root.style.setProperty('--diogen-surface-bg', this.config.surfaceBgColor);
            }
            if (this.config.userBgColor) {
                root.style.setProperty('--diogen-user-bg', this.config.userBgColor);
            }
            if (this.config.borderColor) {
                root.style.setProperty('--diogen-border-color', this.config.borderColor);
            }
            if (this.config.borderRadius) {
                root.style.setProperty('--diogen-border-radius', this.config.borderRadius);
            }
            if (this.config.fontFamily) {
                root.style.setProperty('--diogen-font-family', this.config.fontFamily);
            }
            if (this.config.inputRadius) {
                root.style.setProperty('--diogen-input-radius', this.config.inputRadius);
            }
            
            // –†–∞–∑–º–µ—Ä—ã
            if (this.config.width) {
                root.style.setProperty('--diogen-width', this.config.width);
            }
            if (this.config.height) {
                root.style.setProperty('--diogen-height', this.config.height);
            }
            if (this.config.buttonSize) {
                root.style.setProperty('--diogen-button-size', this.config.buttonSize);
            }
            
            // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            if (this.config.darkPrimaryColor) {
                root.style.setProperty('--diogen-dark-primary-color', this.config.darkPrimaryColor);
            }
            if (this.config.darkTextColor) {
                root.style.setProperty('--diogen-dark-text-color', this.config.darkTextColor);
            }
            if (this.config.darkBgColor) {
                root.style.setProperty('--diogen-dark-bg-color', this.config.darkBgColor);
            }
            if (this.config.darkSurfaceBgColor) {
                root.style.setProperty('--diogen-dark-surface-bg', this.config.darkSurfaceBgColor);
            }
            if (this.config.darkUserBgColor) {
                root.style.setProperty('--diogen-dark-user-bg', this.config.darkUserBgColor);
            }
            if (this.config.darkBorderColor) {
                root.style.setProperty('--diogen-dark-border-color', this.config.darkBorderColor);
            }
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            this.applyButtonPosition();
        }
        
        applyButtonPosition() {
            if (!this.button) return;
            
            const button = this.button;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            button.style.bottom = '';
            button.style.right = '';
            button.style.left = '';
            button.style.top = '';
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            switch (this.config.position) {
                case 'bottom-left':
                    button.style.bottom = this.config.bottomOffset || '20px';
                    button.style.left = this.config.leftOffset || '20px';
                    break;
                case 'top-right':
                    button.style.top = this.config.topOffset || '20px';
                    button.style.right = this.config.rightOffset || '20px';
                    break;
                case 'top-left':
                    button.style.top = this.config.topOffset || '20px';
                    button.style.left = this.config.leftOffset || '20px';
                    break;
                case 'bottom-right':
                default:
                    button.style.bottom = this.config.bottomOffset || '20px';
                    button.style.right = this.config.rightOffset || '20px';
                    break;
            }
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function initWidget() {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const script = document.currentScript || document.querySelector('script[data-diogen-project]');
        
        const config = {};
        
        // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        if (script) {
            config.project = script.getAttribute('data-diogen-project') || DEFAULT_CONFIG.project;
            config.projectId = script.getAttribute('data-diogen-project-id') || DEFAULT_CONFIG.projectId;
            config.userId = script.getAttribute('data-diogen-user-id') || DEFAULT_CONFIG.userId;
            config.position = script.getAttribute('data-diogen-position') || DEFAULT_CONFIG.position;
            config.buttonSize = script.getAttribute('data-diogen-button-size') || DEFAULT_CONFIG.buttonSize;
            config.width = script.getAttribute('data-diogen-width') || DEFAULT_CONFIG.width;
            config.height = script.getAttribute('data-diogen-height') || DEFAULT_CONFIG.height;
            config.apiUrl = script.getAttribute('data-diogen-api-url') || DEFAULT_CONFIG.apiUrl;
            config.theme = script.getAttribute('data-diogen-theme') || DEFAULT_CONFIG.theme;
            config.enableThemeToggle = script.getAttribute('data-diogen-enable-theme-toggle') !== 'false';
            config.basicLogin = script.getAttribute('data-diogen-basic-login') || DEFAULT_CONFIG.basicLogin;
            config.basicPassword = script.getAttribute('data-diogen-basic-password') || DEFAULT_CONFIG.basicPassword;
            
            // –û–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            config.devMode = script.getAttribute('data-diogen-dev-mode') || DEFAULT_CONFIG.devMode;
            config.proxyPath = script.getAttribute('data-diogen-proxy-path') || DEFAULT_CONFIG.proxyPath;
            
            // –°—Ç–∏–ª–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
            config.primaryColor = script.getAttribute('data-diogen-primary-color');
            config.primaryHoverColor = script.getAttribute('data-diogen-primary-hover-color');
            config.textColor = script.getAttribute('data-diogen-text-color');
            config.bgColor = script.getAttribute('data-diogen-bg-color');
            config.surfaceBgColor = script.getAttribute('data-diogen-surface-bg-color');
            config.userBgColor = script.getAttribute('data-diogen-user-bg-color');
            config.borderColor = script.getAttribute('data-diogen-border-color');
            config.borderRadius = script.getAttribute('data-diogen-border-radius');
            config.fontFamily = script.getAttribute('data-diogen-font-family');
            config.inputRadius = script.getAttribute('data-diogen-input-radius');
            config.title = script.getAttribute('data-diogen-title') || DEFAULT_CONFIG.title;
            
            // –°—Ç–∏–ª–∏ - —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
            config.darkPrimaryColor = script.getAttribute('data-diogen-dark-primary-color');
            config.darkTextColor = script.getAttribute('data-diogen-dark-text-color');
            config.darkBgColor = script.getAttribute('data-diogen-dark-bg-color');
            config.darkSurfaceBgColor = script.getAttribute('data-diogen-dark-surface-bg-color');
            config.darkUserBgColor = script.getAttribute('data-diogen-dark-user-bg-color');
            config.darkBorderColor = script.getAttribute('data-diogen-dark-border-color');
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            config.bottomOffset = script.getAttribute('data-diogen-bottom-offset');
            config.rightOffset = script.getAttribute('data-diogen-right-offset');
            config.leftOffset = script.getAttribute('data-diogen-left-offset');
            config.topOffset = script.getAttribute('data-diogen-top-offset');
        }
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                try {
                    window.DiogenChat = new DiogenChatWidget(config);
                    console.log('‚úÖ Diogen Chat Widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Diogen Chat Widget:', error);
                }
            });
        } else {
            try {
                window.DiogenChat = new DiogenChatWidget(config);
                console.log('‚úÖ Diogen Chat Widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Diogen Chat Widget:', error);
            }
        }
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    window.DiogenChatWidget = DiogenChatWidget;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initWidget();
})(); 