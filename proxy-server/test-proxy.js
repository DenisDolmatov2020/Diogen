const fetch = require('node-fetch');

async function testProxy() {
    const proxyUrl = 'http://localhost:3001/proxy';
    const targetUrl = 'https://knowledge.slovo-soft.ru/api/v1/mentorium';
    const token = Buffer.from('pfki:pfki').toString('base64');
    
    const payload = [{
        component_name: "meta_data",
        parent_block_id: "block-0-1",
        action_mode: "dialog",
        action_params: [
            {
                variable: "input_text",
                data: "—Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"
            },
            {
                variable: "reference_id",
                data: "000.3654823." + Math.floor(Date.now() / 1000)
            }
        ]
    }];
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä...');
    console.log('üì° –ü—Ä–æ–∫—Å–∏ URL:', proxyUrl);
    console.log('üéØ –¶–µ–ª–µ–≤–æ–π URL:', targetUrl);
    console.log('üì§ Payload:', JSON.stringify(payload, null, 2));
    
    try {
        const response = await fetch(proxyUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Target-URL': targetUrl,
                'X-TOKEN': token
            },
            body: JSON.stringify(payload)
        });
        
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
        response.headers.forEach((value, key) => {
            console.log(`  ${key}: ${value}`);
        });
        
        const responseText = await response.text();
        console.log('üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseText);
        
        if (response.ok) {
            console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
            try {
                const jsonData = JSON.parse(responseText);
                console.log('üìù –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON:', JSON.stringify(jsonData, null, 2));
            } catch (e) {
                console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
            }
        } else {
            console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:', error.message);
    }
}

// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
async function testHealth() {
    const healthUrl = 'http://localhost:3001/health';
    
    console.log('\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...');
    
    try {
        const response = await fetch(healthUrl);
        const data = await response.json();
        
        console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
        console.log('üìã –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
        
        if (response.ok && data.status === 'OK') {
            console.log('‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ health check:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞\n');
    
    await testHealth();
    await testProxy();
    
    console.log('\nüèÅ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runTests(); 