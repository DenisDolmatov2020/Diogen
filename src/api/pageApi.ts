import apiService from '@/services/apiService'

export interface BlockConfig {
  component_name: string
  parent_block_id: string
  components_id?: string
  action_mode: string
  is_need_meta?: boolean
  block_id?: string
  action_params: Array<{
    variable: string
    data: any
  }>
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
export interface BackendResponse {
  component_name: string
  parent_block_id: string
  items?: Array<{
    title: string
    data?: any
    hidden_data?: string
    status?: string
    variable: string
    fate: string
  }>
}

export async function fetchFilledConfig(rawConfig: BlockConfig[]): Promise<BlockConfig[]> {
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥:', rawConfig)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const response = await fetch('https://di.slovo-soft.ru:6443/create_answer_for_front_api', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-TOKEN': 'wYZj8hN91r7ggb33PDzGMPnOEZxEfQDRKDYuFG-JLwG0Dot8lZAhfHbXXg-C51wimX2oOd_s3JGYCCwN_FrjstjMNr_2uYLoYRfF8uY8rJWXFnI8SFUKx3lrTXOGLUnc'
      },
      body: JSON.stringify(rawConfig)
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const backendData: BackendResponse[] = await response.json()
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞:', backendData)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const transformedData = transformBackendResponse(backendData, rawConfig)
    console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', transformedData)
    
    return transformedData
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error)
    console.info('üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    console.info('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API')
    
    // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const mockData = generateMockData(rawConfig)
    console.log('üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã mock –¥–∞–Ω–Ω—ã–µ:', mockData)
    return mockData
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
function transformBackendResponse(backendData: BackendResponse[], originalConfig: BlockConfig[]): BlockConfig[] {
  return originalConfig.map(originalBlock => {
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –±—ç–∫–µ–Ω–¥–∞
    const backendBlock = backendData.find(
      block => block.component_name === originalBlock.component_name && 
               block.parent_block_id === originalBlock.parent_block_id
    )
    
    if (!backendBlock || !backendBlock.items) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π
      return {
        ...originalBlock,
        action_params: [
          ...originalBlock.action_params,
          {
            variable: 'backend_status',
            data: 'no_data'
          }
        ]
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—ç–∫–µ–Ω–¥–∞ –≤ action_params
    const backendParams = backendBlock.items.map(item => ({
      variable: `backend_${item.variable}`,
      data: {
        title: item.title,
        content: item.data,
        hidden_data: item.hidden_data,
        status: item.status,
        fate: item.fate,
        original_variable: item.variable
      }
    }))
    
    return {
      ...originalBlock,
      action_params: [
        ...originalBlock.action_params,
        {
          variable: 'backend_status',
          data: 'loaded'
        },
        ...backendParams
      ]
    }
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock –¥–∞–Ω–Ω—ã—Ö
function generateMockData(rawConfig: BlockConfig[]): BlockConfig[] {
  return rawConfig.map(block => {
    const mockData = {
      ...block,
      action_params: [
        ...block.action_params,
        {
          variable: 'reference_id',
          data: `mock.${Date.now()}.${Math.random().toString(36).substr(2, 9)}`
        }
      ]
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    switch (block.component_name) {
      case 'text_block':
        mockData.action_params.push({
          variable: 'mock_content',
          data: getMockTextContent(block)
        })
        break
        
      case 'info_panel':
        mockData.action_params.push({
          variable: 'mock_info',
          data: getMockInfoData(block)
        })
        break
        
      case 'progress_bar':
        mockData.action_params.push({
          variable: 'mock_progress',
          data: {
            value: Math.floor(Math.random() * 100),
            max: 100,
            status: 'active'
          }
        })
        break
        
      case 'action_button':
        mockData.action_params.push({
          variable: 'mock_button',
          data: {
            enabled: true,
            loading: false
          }
        })
        break
    }

    return mockData
  })
}

function getMockTextContent(block: BlockConfig): any {
  const keysParam = block.action_params?.find(p => p.variable === 'keys')
  const key = keysParam?.data?.[0]
  
  const mockTexts: Record<string, string> = {
    'article_title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –∏–∑ –±—ç–∫–µ–Ω–¥–∞',
    'article_content': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.',
    'project_name': '–ü—Ä–æ–µ–∫—Ç "–î–∏–æ–≥–µ–Ω" - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
    'order_title': '–ó–∞–∫–∞–∑ #12345 - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'order_description': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞'
  }
  
  return {
    content: mockTexts[key] || '–¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞',
    editable: block.action_mode === 'editable_layout'
  }
}

function getMockInfoData(block: BlockConfig): any {
  const keysParam = block.action_params?.find(p => p.variable === 'keys')
  const keys = keysParam?.data || []
  
  const mockInfo: Record<string, any> = {
    '19003': { label: '–°—Ç–∞—Ç—É—Å', value: '–ê–∫—Ç–∏–≤–Ω—ã–π', type: 'status' },
    '19004': { label: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', value: '–í—ã—Å–æ–∫–∏–π', type: 'priority' },
    '19005': { label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', value: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', type: 'category' },
    '19006': { label: '–ê–≤—Ç–æ—Ä', value: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', type: 'user' },
    '19007': { label: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', value: '2024-01-15', type: 'date' },
    '19008': { label: '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', value: '2024-01-20', type: 'date' }
  }
  
  return {
    items: keys.map((key: string) => mockInfo[key] || { label: `–ü–æ–ª–µ ${key}`, value: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', type: 'text' }),
    layout: block.action_mode
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
export async function fetchPageMeta(pageId: string): Promise<any> {
  try {
    return await apiService.get(`/api/page/${pageId}/meta`)
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error)
    return { title: '–°—Ç—Ä–∞–Ω–∏—Ü–∞', description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' }
  }
}

export async function savePageConfig(pageId: string, config: BlockConfig[]): Promise<boolean> {
  try {
    await apiService.put(`/api/page/${pageId}/config`, config)
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error)
    return false
  }
}

export async function executeAction(actionData: any): Promise<any> {
  try {
    return await apiService.post('/api/action/execute', actionData)
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error)
    throw error
  }
} 