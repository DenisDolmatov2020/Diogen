import { env, devLog, devWarn, devError } from '@/utils/env'
import { getOrCreateReferenceId } from '@/utils/referenceIdManager'

interface AuthResponse {
  access_token: string
  token_type: string
  expires_in: number
}

interface ApiConfig {
  authUrl: string
  frontToken: string
  basicLogin: string
  basicPassword: string
  loginEndpoint: string
}

interface RequestConfig {
  method?: string
  headers?: Record<string, string>
  body?: any
  timeout?: number
}

class ApiService {
  private config: ApiConfig
  private accessToken: string | null = null
  private tokenExpiry: number | null = null

  constructor() {
    this.config = {
      authUrl: env.api.authUrl,
      frontToken: env.api.frontToken,
      basicLogin: env.api.basicLogin,
      basicPassword: env.api.basicPassword,
      loginEndpoint: env.api.loginEndpoint
    }
  }

  private async ensureValidToken(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (this.accessToken && this.tokenExpiry && Date.now() < this.tokenExpiry - 60000) {
      return // –¢–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (—Å –∑–∞–ø–∞—Å–æ–º –≤ 1 –º–∏–Ω—É—Ç—É)
    }

    devLog('üîë –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...')
    await this.authenticate()
  }

  private async authenticate(): Promise<void> {
    try {
      const credentials = btoa(`${this.config.basicLogin}:${this.config.basicPassword}`)
      
      const response = await fetch(`${this.config.authUrl}/${this.config.loginEndpoint}`, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${credentials}`,
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data: AuthResponse = await response.json()
      this.accessToken = data.access_token
      this.tokenExpiry = Date.now() + (data.expires_in * 1000)
      
      devLog('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')
    }
  }

  private async fetchWithTimeout(url: string, options: RequestInit, timeout = 10000): Promise<Response> {
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), timeout)

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      })
      clearTimeout(timeoutId)
      return response
    } catch (error) {
      clearTimeout(timeoutId)
      throw error
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  async request<T = any>(url: string, config: RequestConfig = {}): Promise<T> {
    await this.ensureValidToken()

    const fullUrl = url.startsWith('http') ? url : `${this.config.authUrl}${url}`
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...config.headers
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (this.accessToken) {
      headers.Authorization = `Bearer ${this.accessToken}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º front_token –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.config.frontToken) {
      headers['X-Front-Token'] = this.config.frontToken
    }

    const requestOptions: RequestInit = {
      method: config.method || 'GET',
      headers,
      body: config.body ? JSON.stringify(config.body) : undefined
    }

    try {
      const response = await this.fetchWithTimeout(fullUrl, requestOptions, config.timeout)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (response.status === 401) {
        devWarn('üîë –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...')
        this.accessToken = null
        this.tokenExpiry = null
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        await this.ensureValidToken()
        if (this.accessToken) {
          headers.Authorization = `Bearer ${this.accessToken}`
          const retryResponse = await this.fetchWithTimeout(fullUrl, {
            ...requestOptions,
            headers
          }, config.timeout)
          
          if (!retryResponse.ok) {
            throw new Error(`HTTP error! status: ${retryResponse.status}`)
          }
          
          return await retryResponse.json()
        }
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      const contentType = response.headers.get('content-type')
      if (contentType && contentType.includes('application/json')) {
        return await response.json()
      }
      
      return response.text() as any
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error)
      throw error
    }
  }

  // –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  async get<T = any>(url: string, config?: Omit<RequestConfig, 'method' | 'body'>): Promise<T> {
    return this.request<T>(url, { ...config, method: 'GET' })
  }

  async post<T = any>(url: string, data?: any, config?: Omit<RequestConfig, 'method'>): Promise<T> {
    return this.request<T>(url, { ...config, method: 'POST', body: data })
  }

  async put<T = any>(url: string, data?: any, config?: Omit<RequestConfig, 'method'>): Promise<T> {
    return this.request<T>(url, { ...config, method: 'PUT', body: data })
  }

  async delete<T = any>(url: string, config?: Omit<RequestConfig, 'method' | 'body'>): Promise<T> {
    return this.request<T>(url, { ...config, method: 'DELETE' })
  }


  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ create_answer_for_front_api
  async sendRequest(payload: any): Promise<any> {
    try {
      devLog('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ create_answer_for_front_api:', payload)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const apiUrl = env.devMode 
        ? '/api/create_answer_for_front_api'  // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
        : '/api/create_answer_for_front_api'  // –î–ª—è production - –∏—Å–ø–æ–ª—å–∑—É–µ–º Netlify —Ä–µ–¥–∏—Ä–µ–∫—Ç
      
      devLog('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º API URL:', apiUrl)
      devLog('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', env.devMode)
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-TOKEN': 'wYZj8hN91r7ggb33PDzGMPnOEZxEfQDRKDYuFG-JLwG0Dot8lZAhfHbXXg-C51wimX2oOd_s3JGYCCwN_FrjstjMNr_2uYLoYRfF8uY8rJWXFnI8SFUKx3lrTXOGLUnc'
        },
        body: JSON.stringify(payload)
      })
      
      devLog('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
      devLog('üìä URL –∑–∞–ø—Ä–æ—Å–∞:', response.url)
      
      if (!response.ok) {
        devError('‚ùå HTTP –æ—à–∏–±–∫–∞:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          headers: Object.fromEntries(response.headers.entries())
        })
        throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`)
      }
      
      const responseData = await response.json()
      devLog('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseData)
      
      return responseData
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è production
      if (!env.devMode) {
        console.error('üö® Production API Error:', {
          error: error instanceof Error ? error.message : 'Unknown error',
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          url: window.location.href
        })
      }
      
      throw error
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ reference_id –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  async createFullReferenceId(partialReferenceId: string, inputData?: {
    input_title?: string
    input_text?: string
    input_audio?: string
    input_file?: string
  }): Promise<string> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º action_params —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const actionParams = [
        {
          variable: "input_title",
          data: inputData?.input_title || ""
        },
        {
          variable: "input_text", 
          data: inputData?.input_text || ""
        },
        {
          variable: "reference_id",
          data: partialReferenceId
        }
      ]

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      if (inputData?.input_audio) {
        actionParams.push({
          variable: "input_audio",
          data: inputData.input_audio
        })
      }

      if (inputData?.input_file) {
        actionParams.push({
          variable: "input_file",
          data: inputData.input_file
        })
      }

      const payload = [{
        action_mode: "processing",
        action_params: actionParams,
        component_id: "0",
        component_name: "card_6_fields",
        parent_block_id: "-reference_id-"
      }]
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      const responseData = await this.sendRequest(payload)
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π reference_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (responseData && responseData.length > 0 && responseData[0].items && responseData[0].items.length > 0) {
        const referenceIdItem = responseData[0].items.find((item: any) => 
          item.meta && item.meta.variable === 'reference_id'
        )
        
        if (referenceIdItem && referenceIdItem.meta && referenceIdItem.meta.data) {
          const fullReferenceId = referenceIdItem.meta.data
          devLog('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π reference_id:', fullReferenceId)
          return fullReferenceId
        }
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å reference_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞')
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ reference_id:', error)
      throw error
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞)
  async sendUpdatedComponentData(projectId: string, referenceId: string, changedFields: Record<string, any>): Promise<any> {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å meta_data –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const payload = [
      {
        "component_name": "meta_data",
        "action_mode": "processing",
        "action_params": [
          {
            "variable": "reference_id",
            "data": referenceId
          },
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
          ...Object.entries(changedFields).map(([fieldName, value]) => ({
            "variable": fieldName,
            "data": value,
            "action_mode": "processing"
          }))
        ]
      }
    ]
    devLog('# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', projectId)
    devLog('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', payload)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    return this.sendRequest(payload)
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  async saveComponentChanges(projectId: string, referenceId: string, changedFields: Record<string, any>): Promise<any> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const result = await this.sendUpdatedComponentData(projectId, referenceId, changedFields)
      
      devLog('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', result)
      return result
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      throw error
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
  async sendChatMessage(message: string, referenceId?: string, keys?: string[]): Promise<any> {
    try {
      devLog('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç—É:', { message, referenceId, keys })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π reference_id –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
      const finalReferenceId = referenceId || getOrCreateReferenceId()
      devLog('üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π reference_id:', finalReferenceId)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const payload = [
        {
          "component_name": "meta_data",
          "parent_block_id": "block-0-1",
          "action_mode": "dialog",
          "action_params": [
            {
              "variable": "input_text",
              "data": message
            },
            {
              "variable": "reference_id",
              "data": finalReferenceId
            }
          ]
        }
      ]
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–¥–ª—è dev —á–µ—Ä–µ–∑ Vite –ø—Ä–æ–∫—Å–∏, –¥–ª—è production —á–µ—Ä–µ–∑ Netlify —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã)
      const apiUrl = '/api/v1/mentorium'
      devLog('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç-–±–æ—Ç—É API:', apiUrl)
      
      // –°–æ–∑–¥–∞–µ–º Basic Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const credentials = btoa(`${env.api.basicLogin}:${env.api.basicPassword}`)
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${credentials}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(payload)
      })
      
      devLog('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
      devLog('üìä URL –∑–∞–ø—Ä–æ—Å–∞:', response.url)
      
      if (!response.ok) {
        devError('‚ùå HTTP –æ—à–∏–±–∫–∞:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          headers: Object.fromEntries(response.headers.entries())
        })
        throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`)
      }
      
      const responseData = await response.json()
      devLog('üì• –û—Ç–≤–µ—Ç —á–∞—Ç-–±–æ—Ç–∞:', responseData)
      
      return responseData
    } catch (error) {
      devError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç—É:', error)
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
      return [
        {
          "component_name": "text_block",
          "parent_block_id": "block-0-0",
          "items": [
            {
              "title": "–û—à–∏–±–∫–∞",
              "data": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
              "status": "missed"
            }
          ]
        }
      ]
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const apiService = new ApiService()
export default apiService 