import type { TreeBlock, FlatBlock } from '@/types/block'
import { getOrCreateReferenceId } from '@/utils/referenceIdManager'

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ reference_id –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
 * –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç reference_id –∫ –±–ª–æ–∫–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ–≥–æ –Ω–µ—Ç
 */
export function injectReferenceId(treeBlocks: TreeBlock[]): TreeBlock[] {
  const referenceId = getOrCreateReferenceId()
  
  console.log('üîß [injectReferenceId] –í–Ω–µ–¥—Ä—è–µ–º reference_id:', referenceId)
  
  return treeBlocks.map(block => {
    const updatedBlock: TreeBlock = {
      ...block,
      action_params: block.action_params ? [...block.action_params] : []
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π reference_id –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π
    if (updatedBlock.action_params) {
      updatedBlock.action_params = updatedBlock.action_params.map(param => {
        if (param.variable === 'reference_id') {
          console.log(`    üîÑ –ó–∞–º–µ–Ω—è–µ–º reference_id: ${param.data} ‚Üí ${referenceId}`)
          return {
            ...param,
            data: referenceId
          }
        }
        return param
      })
    }
    
    // –ï—Å–ª–∏ reference_id –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!updatedBlock.action_params || updatedBlock.action_params.length === 0) {
      console.log(`    ‚ûï –î–æ–±–∞–≤–ª—è–µ–º reference_id: ${referenceId}`)
      updatedBlock.action_params = [{
        variable: 'reference_id',
        data: referenceId
      }]
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
    if (block.children) {
      updatedBlock.children = injectReferenceId(block.children)
    }
    
    return updatedBlock
  })
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–ª–æ—Å–∫—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
 */
export function treeToFlat(treeBlocks: TreeBlock[]): FlatBlock[] {
  console.log('üîÑ [treeToFlat] –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É')
  console.log('  üìä –í—Ö–æ–¥—è—â–µ–µ –¥–µ—Ä–µ–≤–æ:', JSON.stringify(treeBlocks, null, 2))
  
  const flatBlocks: FlatBlock[] = []
  
  function traverse(blocks: TreeBlock[], parentId: string = '') {
    console.log(`  üö∂ –û–±—Ö–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å —Å ${blocks.length} –±–ª–æ–∫–æ–≤, —Ä–æ–¥–∏—Ç–µ–ª—å: ${parentId || 'ROOT'}`)
    
    blocks.forEach((block, index) => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
      const componentId = parentId ? `${parentId}.${index}` : `${index}`
      
      console.log(`    üì¶ –ë–ª–æ–∫ ${block.component_name} ‚Üí ID: ${componentId}`)
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –±–ª–æ–∫
      const flatBlock: FlatBlock = {
        components_id: block.components_id,
        component_name: block.component_name,
        component_id: componentId,
        parent_block_id: block.parent_block_id,
        action_mode: block.action_mode,
        action_params: block.action_params
      }
      
      flatBlocks.push(flatBlock)
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      if (block.children && block.children.length > 0) {
        console.log(`    üë∂ –ë–ª–æ–∫ ${block.component_name} –∏–º–µ–µ—Ç ${block.children.length} –¥–µ—Ç–µ–π`)
        traverse(block.children, componentId)
      } else {
        console.log(`    üçÉ –ë–ª–æ–∫ ${block.component_name} - –ª–∏—Å—Ç`)
      }
    })
  }
  
  traverse(treeBlocks)
  
  console.log('üîÑ [treeToFlat] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:')
  flatBlocks.forEach(block => {
    console.log(`    ${block.component_id}: ${block.component_name}`)
  })
  
  return flatBlocks
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é
 */
export function flatToTree(flatBlocks: FlatBlock[]): TreeBlock[] {
  console.log('üå≥ [flatToTree] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
  console.log('  üì• –í—Ö–æ–¥—è—â–∏–µ –±–ª–æ–∫–∏:', flatBlocks.map(b => `${b.component_name}(${b.component_id})`).join(', '))
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∏–µ—Ä–∞—Ä—Ö–∏–∏
  const blocksByParent = new Map<string | null, FlatBlock[]>()
  
  flatBlocks.forEach(block => {
    const parentId = getParentId(block.component_id)
    console.log(`  üìÇ –ë–ª–æ–∫ ${block.component_name}(${block.component_id}) ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å: ${parentId || 'ROOT'}`)
    
    if (!blocksByParent.has(parentId)) {
      blocksByParent.set(parentId, [])
    }
    blocksByParent.get(parentId)!.push(block)
  })
  
  console.log('  üóÇÔ∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º:')
  blocksByParent.forEach((blocks, parentId) => {
    console.log(`    ${parentId || 'ROOT'}: [${blocks.map(b => b.component_name).join(', ')}]`)
  })
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
  function buildTreeFromBlocks(parentId: string | null): TreeBlock[] {
    const blocks = blocksByParent.get(parentId) || []
    console.log(`  üî® –°—Ç—Ä–æ–∏–º –≤–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ${parentId || 'ROOT'}: ${blocks.length} –±–ª–æ–∫–æ–≤`)
    
    return blocks.map(block => {
      // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      const children = buildTreeFromBlocks(block.component_id)
      console.log(`    üåø –ë–ª–æ–∫ ${block.component_name}(${block.component_id}) –∏–º–µ–µ—Ç ${children.length} –¥–µ—Ç–µ–π`)
      
      const treeBlock: TreeBlock = {
        components_id: block.components_id,
        component_name: block.component_name,
        parent_block_id: block.parent_block_id,
        action_mode: block.action_mode,
        action_params: block.action_params,
        ...(children.length > 0 && { children })
      }
      
      return treeBlock
    })
  }
  
  const result = buildTreeFromBlocks(null)
  console.log('üå≥ [flatToTree] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞:', JSON.stringify(result, null, 2))
  
  return result
}

function getParentId(componentId: string): string | null {
  const parts = componentId.split('.')
  if (parts.length <= 1) return null
  return parts.slice(0, -1).join('.')
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∫ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
 */
export function applyBackendData(treeBlocks: TreeBlock[], backendData: any[]): TreeBlock[] {
  console.log('üîÑ [applyBackendData] –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∫ –¥–µ—Ä–µ–≤—É')
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –ø–æ component_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const backendMap = new Map<string, any>()
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞
  if (Array.isArray(backendData)) {
    backendData.forEach((item, index) => {
      // –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å component_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (item.component_id !== undefined) {
        backendMap.set(item.component_id, item)
        console.log(`  üìù –ú–∞–ø–∏–º –ø–æ component_id: ${item.component_id} ‚Üí ${item.component_name}`)
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ ID
        backendMap.set(index.toString(), item)
        console.log(`  üìù –ú–∞–ø–∏–º –ø–æ –∏–Ω–¥–µ–∫—Å—É: ${index} ‚Üí ${item.component_name}`)
      }
    })
  }
  
  function applyDataToBlock(block: TreeBlock, blockIndex: string = '0'): TreeBlock {
    console.log(`  üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫: ${block.component_name} (ID: ${blockIndex})`)
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
    const backendItem = backendMap.get(blockIndex) || backendMap.get(block.components_id || '')
    
    if (backendItem) {
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ ${block.component_name}:`, backendItem)
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
      const updatedBlock: TreeBlock = {
        ...block,
        // –î–æ–±–∞–≤–ª—è–µ–º items –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        ...(backendItem.items && { items: backendItem.items }),
        // –û–±–Ω–æ–≤–ª—è–µ–º action_params, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        action_params: block.action_params ? [...block.action_params] : []
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –≤ action_params, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
      if (backendItem.action_params) {
        backendItem.action_params.forEach((param: any) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
          const existingIndex = updatedBlock.action_params!.findIndex(p => p.variable === param.variable)
          if (existingIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            updatedBlock.action_params![existingIndex] = param
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            updatedBlock.action_params!.push(param)
          }
        })
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      if (block.children && block.children.length > 0) {
        console.log(`  üë∂ –ë–ª–æ–∫ ${block.component_name} –∏–º–µ–µ—Ç ${block.children.length} –¥–µ—Ç–µ–π`)
        updatedBlock.children = block.children.map((child, childIndex) => {
          const childId = `${blockIndex}.${childIndex}`
          return applyDataToBlock(child, childId)
        })
      }
      
      return updatedBlock
    } else {
      console.log(`  ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ ${block.component_name} (ID: ${blockIndex}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
      if (block.children && block.children.length > 0) {
        const updatedBlock = { ...block }
        updatedBlock.children = block.children.map((child, childIndex) => {
          const childId = `${blockIndex}.${childIndex}`
          return applyDataToBlock(child, childId)
        })
        return updatedBlock
      }
      
      return block
    }
  }
  
  const result = treeBlocks.map((block, index) => applyDataToBlock(block, index.toString()))
  
  return result
} 