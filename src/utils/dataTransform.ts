import { getOrCreateReferenceId } from './referenceIdManager'
import type { TreeBlock, FlatBlock } from '@/types/block'

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ reference_id –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
 * –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç reference_id –∫ –±–ª–æ–∫–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ–≥–æ –Ω–µ—Ç
 */
export function injectReferenceId(treeBlocks: TreeBlock[]): TreeBlock[] {
  const currentReferenceId = getOrCreateReferenceId()
  
  console.log('üîß [injectReferenceId] –í–Ω–µ–¥—Ä—è–µ–º reference_id:', currentReferenceId)
  
  function updateReferenceIdRecursive(blocks: TreeBlock[]): TreeBlock[] {
    return blocks.map(block => {
      console.log(`  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫: ${block.component_name}`)
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –±–ª–æ–∫–∞
      const updatedBlock: TreeBlock = {
        ...block,
        action_params: [...block.action_params]
      }
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π reference_id
      let hasReferenceId = false
      updatedBlock.action_params = updatedBlock.action_params.map(param => {
        if (param.variable === 'reference_id') {
          hasReferenceId = true
          console.log(`    üîÑ –ó–∞–º–µ–Ω—è–µ–º reference_id: ${param.data} ‚Üí ${currentReferenceId}`)
          return {
            ...param,
            data: currentReferenceId
          }
        }
        return param
      })
      
      // –ï—Å–ª–∏ reference_id –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      if (!hasReferenceId) {
        console.log(`    ‚ûï –î–æ–±–∞–≤–ª—è–µ–º reference_id: ${currentReferenceId}`)
        updatedBlock.action_params.push({
          variable: 'reference_id',
          data: currentReferenceId
        })
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      if (block.children && block.children.length > 0) {
        console.log(`    üë∂ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${block.children.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –±–ª–æ–∫–æ–≤`)
        updatedBlock.children = updateReferenceIdRecursive(block.children)
      }
      
      return updatedBlock
    })
  }
  
  const result = updateReferenceIdRecursive(treeBlocks)
  console.log('‚úÖ [injectReferenceId] reference_id —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω –≤–æ –≤—Å–µ –±–ª–æ–∫–∏')
  
  return result
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–ª–æ—Å–∫—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
 */
export function treeToFlat(treeBlocks: TreeBlock[]): FlatBlock[] {
  console.log('üîÑ [treeToFlat] –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É')
  console.log('  üìä –í—Ö–æ–¥—è—â–µ–µ –¥–µ—Ä–µ–≤–æ:', JSON.stringify(treeBlocks, null, 2))
  
  const flatBlocks: FlatBlock[] = []
  
  function traverse(blocks: TreeBlock[], parentId: string = '') {
    console.log(`  üö∂ –û–±—Ö–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å —Å ${blocks.length} –±–ª–æ–∫–æ–≤, —Ä–æ–¥–∏—Ç–µ–ª—å: ${parentId || 'ROOT'}`)
    
    blocks.forEach((block, index) => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
      const componentId = parentId ? `${parentId}.${index}` : `${index}`
      
      console.log(`    üì¶ –ë–ª–æ–∫ ${block.component_name} ‚Üí ID: ${componentId}`)
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –±–ª–æ–∫
      const flatBlock: FlatBlock = {
        component_name: block.component_name,
        component_id: componentId,
        action_mode: block.action_mode,
        action_params: block.action_params
      }
      
      flatBlocks.push(flatBlock)
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      if (block.children && block.children.length > 0) {
        console.log(`    üë∂ –ë–ª–æ–∫ ${block.component_name} –∏–º–µ–µ—Ç ${block.children.length} –¥–µ—Ç–µ–π`)
        traverse(block.children, componentId)
      } else {
        console.log(`    üçÉ –ë–ª–æ–∫ ${block.component_name} - –ª–∏—Å—Ç`)
      }
    })
  }
  
  traverse(treeBlocks)
  
  console.log('üîÑ [treeToFlat] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:')
  flatBlocks.forEach(block => {
    console.log(`    ${block.component_id}: ${block.component_name}`)
  })
  
  return flatBlocks
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é
 */
export function flatToTree(flatBlocks: FlatBlock[]): TreeBlock[] {
  console.log('üå≥ [flatToTree] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
  console.log('  üì• –í—Ö–æ–¥—è—â–∏–µ –±–ª–æ–∫–∏:', flatBlocks.map(b => `${b.component_name}(${b.component_id})`).join(', '))
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∏–µ—Ä–∞—Ä—Ö–∏–∏
  const blocksByParent = new Map<string | null, FlatBlock[]>()
  
  flatBlocks.forEach(block => {
    const parentId = getParentId(block.component_id)
    console.log(`  üìÇ –ë–ª–æ–∫ ${block.component_name}(${block.component_id}) ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å: ${parentId || 'ROOT'}`)
    
    if (!blocksByParent.has(parentId)) {
      blocksByParent.set(parentId, [])
    }
    blocksByParent.get(parentId)!.push(block)
  })
  
  console.log('  üóÇÔ∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º:')
  blocksByParent.forEach((blocks, parentId) => {
    console.log(`    ${parentId || 'ROOT'}: [${blocks.map(b => b.component_name).join(', ')}]`)
  })
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
  function buildTreeFromBlocks(parentId: string | null): TreeBlock[] {
    const blocks = blocksByParent.get(parentId) || []
    console.log(`  üî® –°—Ç—Ä–æ–∏–º –≤–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ${parentId || 'ROOT'}: ${blocks.length} –±–ª–æ–∫–æ–≤`)
    
    return blocks.map(block => {
      // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
      const children = buildTreeFromBlocks(block.component_id)
      console.log(`    üåø –ë–ª–æ–∫ ${block.component_name}(${block.component_id}) –∏–º–µ–µ—Ç ${children.length} –¥–µ—Ç–µ–π`)
      
      const treeBlock: TreeBlock = {
        component_name: block.component_name,
        action_mode: block.action_mode,
        action_params: block.action_params,
        ...(children.length > 0 && { children })
      }
      
      return treeBlock
    })
  }
  
  const result = buildTreeFromBlocks(null)
  console.log('üå≥ [flatToTree] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞:', JSON.stringify(result, null, 2))
  
  return result
}

function getParentId(componentId: string): string | null {
  const parts = componentId.split('.')
  if (parts.length <= 1) return null
  return parts.slice(0, -1).join('.')
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∫ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
 */
export function applyBackendData(
  originalTree: TreeBlock[], 
  backendFlat: FlatBlock[]
): TreeBlock[] {
  console.log('üîß [applyBackendData] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–∞')
  console.log('  üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –¥–µ—Ä–µ–≤–æ:', JSON.stringify(originalTree, null, 2))
  console.log('  üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', JSON.stringify(backendFlat, null, 2))
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!Array.isArray(backendFlat)) {
    console.warn('‚ö†Ô∏è backendFlat –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–µ—Ä–µ–≤–æ')
    return originalTree
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const originalFlat = treeToFlat(originalTree)
  console.log('  üîÑ –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞:', JSON.stringify(originalFlat, null, 2))
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±—ç–∫–µ–Ω–¥–∞
  const backendMap = new Map<string, FlatBlock>()
  backendFlat.forEach(block => {
    if (block && block.component_id) {
      backendMap.set(block.component_id, block)
    }
  })
  console.log('  üó∫Ô∏è –ö–∞—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–∞:', Array.from(backendMap.keys()))
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  const updatedFlat = originalFlat.map(originalBlock => {
    const backendBlock = backendMap.get(originalBlock.component_id)
    
    if (backendBlock && backendBlock.action_params) {
      console.log(`    ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ ${originalBlock.component_name} (${originalBlock.component_id})`)
      return {
        ...originalBlock,
        action_params: backendBlock.action_params // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –±—ç–∫–µ–Ω–¥–∞
      }
    }
    
    console.log(`    ‚ö†Ô∏è –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞ ${originalBlock.component_name} (${originalBlock.component_id})`)
    return originalBlock
  })
  console.log('  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', JSON.stringify(updatedFlat, null, 2))
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–µ—Ä–µ–≤–æ
  const result = flatToTree(updatedFlat)
  console.log('üèÅ [applyBackendData] –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ:', JSON.stringify(result, null, 2))
  
  return result
} 