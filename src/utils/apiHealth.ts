import { env, devLog, devError } from '@/utils/env'

export interface ApiHealthStatus {
  isOnline: boolean
  responseTime: number
  error?: string
  timestamp: string
}

export async function checkApiHealth(): Promise<ApiHealthStatus> {
  const startTime = performance.now()
  const timestamp = new Date().toISOString()
  
  try {
    devLog('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...')
    
    // –ü—Ä–æ—Å—Ç–æ–π health check –∑–∞–ø—Ä–æ—Å
    const healthCheckUrl = env.devMode 
      ? '/api' 
      : '/api'
    
    await fetch(healthCheckUrl, {
      method: 'HEAD',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    
    const responseTime = performance.now() - startTime
    
    devLog(`‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω (${Math.round(responseTime)}ms)`)
    
    return {
      isOnline: true,
      responseTime: Math.round(responseTime),
      timestamp
    }
    
  } catch (error) {
    const responseTime = performance.now() - startTime
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    
    devError('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', errorMessage)
    
    return {
      isOnline: false,
      responseTime: Math.round(responseTime),
      error: errorMessage,
      timestamp
    }
  }
}

export async function diagnoseApiConnection(): Promise<void> {
  devLog('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:')
  
  const health = await checkApiHealth()
  
  console.group('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API:')
  console.log('üåê URL:', window.location.href)
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', env.devMode)
  console.log('üì° API —Å—Ç–∞—Ç—É—Å:', health.isOnline ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:', `${health.responseTime}ms`)
  console.log('üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', health.timestamp)
  
  if (!health.isOnline && health.error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', health.error)
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üåç User Agent:', navigator.userAgent)
  console.log('üîó –ë–∞–∑–æ–≤—ã–π URL:', import.meta.env.BASE_URL)
  console.log('üîë API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
    authUrl: env.api.authUrl,
    loginEndpoint: env.api.loginEndpoint
  })
  
  console.groupEnd()
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (env.devMode) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  setTimeout(() => {
    diagnoseApiConnection().catch(console.error)
  }, 1000)
} 