#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/add-config.js project-name page-name
 * –ü—Ä–∏–º–µ—Ä: node scripts/add-config.js my-project main
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const projectName = process.argv[2]
const pageName = process.argv[3]

if (!projectName || !pageName) {
  console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/add-config.js <project-name> <page-name>')
  console.log('üìù –ü—Ä–∏–º–µ—Ä: node scripts/add-config.js my-project main')
  process.exit(1)
}

// –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const configTemplate = [
  {
    "component_name": "info_panel",
    "action_mode": "deep_layout",
    "action_params": [
      {
        "variable": "keys", 
        "data": ["title", "description"]
      }
    ],
    "children": [
      {
        "component_name": "text_block",
        "action_mode": "layout",
        "action_params": [
          {
            "variable": "keys",
            "data": ["content"]
          }
        ]
      }
    ]
  }
]

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
const configDir = path.join(__dirname, '..', 'public', 'configs', 'project_pages', projectName)
const configPath = path.join(configDir, `${pageName}.json`)

try {
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  fs.mkdirSync(configDir, { recursive: true })
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(configPath, JSON.stringify(configTemplate, null, 2))
  
  console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω: ${configPath}`)
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ generatedRoutes.ts
  const routesPath = path.join(__dirname, '..', 'src', 'router', 'generatedRoutes.ts')
  const routesContent = fs.readFileSync(routesPath, 'utf8')
  
  const newConfigEntry = `  '/configs/project_pages/${projectName}/${pageName}.json'`
  const configFilesMatch = routesContent.match(/const configFiles = \[([\s\S]*?)\]/m)
  
  if (configFilesMatch) {
    const existingConfigs = configFilesMatch[1]
    if (!existingConfigs.includes(newConfigEntry.trim())) {
      const updatedConfigs = existingConfigs.replace(
        /(\s*\/\/.*–¥–æ–±–∞–≤–ª—è–π—Ç–µ.*)/i,
        `,\n${newConfigEntry}$1`
      )
      
      const updatedContent = routesContent.replace(
        /const configFiles = \[([\s\S]*?)\]/m,
        `const configFiles = [${updatedConfigs}]`
      )
      
      fs.writeFileSync(routesPath, updatedContent)
      console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ generatedRoutes.ts`)
      console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: /${projectName}/${pageName}`)
    } else {
      console.log(`‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ generatedRoutes.ts`)
    }
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  process.exit(1)
} 